---
/**
 * Cart Component
 * Sliding cart sidebar with items, quantities, and checkout button
 */
---

<!-- Cart Sidebar (Hidden by default) -->
<div id="cart-sidebar" class="cart-sidebar">
  <!-- Overlay -->
  <div class="cart-overlay" id="cart-overlay"></div>

  <!-- Sidebar Content -->
  <div class="cart-content">
    <!-- Header -->
    <div class="cart-header">
      <h2 class="text-2xl font-bold">Shopping Cart</h2>
      <button id="close-cart" class="text-zinc-400 hover:text-white transition-colors" aria-label="Close cart">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>

    <!-- Cart Items -->
    <div class="cart-items" id="cart-items">
      <!-- Items will be rendered here by JavaScript -->
    </div>

    <!-- Cart Footer -->
    <div class="cart-footer">
      <div class="flex justify-between items-center mb-4">
        <span class="text-lg text-zinc-400">Subtotal:</span>
        <span class="text-2xl font-bold" id="cart-subtotal">$0.00</span>
      </div>

      <p class="text-sm text-zinc-500 mb-4">Shipping and taxes calculated at checkout</p>

      <button
        id="checkout-btn"
        class="w-full px-6 py-4 bg-white text-black hover:bg-zinc-200 rounded-sm font-bold transition-all uppercase tracking-wider disabled:opacity-50 disabled:cursor-not-allowed"
        disabled
      >
        Proceed to Checkout
      </button>

      <button
        id="clear-cart-btn"
        class="w-full mt-3 px-6 py-3 bg-transparent hover:bg-zinc-900 border border-zinc-700 hover:border-zinc-500 rounded-sm font-semibold transition-all text-sm uppercase tracking-wider"
      >
        Clear Cart
      </button>
    </div>
  </div>
</div>

<!-- Cart Icon Button (Fixed on page) -->
<button
  id="open-cart-btn"
  class="fixed bottom-8 right-8 z-40 w-16 h-16 bg-white text-black hover:bg-zinc-200 rounded-full shadow-lg flex items-center justify-center transition-all hover:scale-110"
  aria-label="Open shopping cart"
>
  <svg class="w-7 h-7" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
  </svg>
  <span id="cart-count-badge" class="cart-count-badge">0</span>
</button>

<style>
  /* Cart Sidebar Styles */
  .cart-sidebar {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 9999;
    pointer-events: none;
  }

  .cart-sidebar.open {
    pointer-events: auto;
  }

  .cart-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.7);
    opacity: 0;
    transition: opacity 0.3s ease;
    backdrop-filter: blur(4px);
  }

  .cart-sidebar.open .cart-overlay {
    opacity: 1;
  }

  .cart-content {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    max-width: 480px;
    background: #09090b;
    transform: translateX(100%);
    transition: transform 0.3s ease;
    display: flex;
    flex-direction: column;
    border-left: 1px solid #27272a;
  }

  .cart-sidebar.open .cart-content {
    transform: translateX(0);
  }

  .cart-header {
    padding: 2rem;
    border-bottom: 1px solid #27272a;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .cart-items {
    flex: 1;
    overflow-y: auto;
    padding: 1.5rem;
  }

  .cart-footer {
    padding: 2rem;
    border-top: 1px solid #27272a;
    background: #0a0a0b;
  }

  .cart-count-badge {
    position: absolute;
    top: -4px;
    right: -4px;
    background: #ef4444;
    color: white;
    border-radius: 9999px;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.75rem;
    font-weight: bold;
  }

  .cart-item {
    display: flex;
    gap: 1rem;
    padding: 1rem;
    background: #18181b;
    border: 1px solid #27272a;
    border-radius: 4px;
    margin-bottom: 1rem;
  }

  .cart-item-image {
    width: 80px;
    height: 80px;
    background: white;
    border-radius: 4px;
    padding: 0.5rem;
    object-fit: contain;
  }

  .cart-item-info {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .cart-item-name {
    font-weight: 600;
    margin-bottom: 0.25rem;
  }

  .cart-item-details {
    font-size: 0.875rem;
    color: #a1a1aa;
    margin-bottom: 0.5rem;
  }

  .cart-item-price {
    font-weight: 700;
    font-size: 1.125rem;
    margin-top: auto;
  }

  .cart-item-actions {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: flex-end;
  }

  .quantity-control {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: #27272a;
    border-radius: 4px;
    padding: 0.25rem;
  }

  .quantity-btn {
    width: 28px;
    height: 28px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: transparent;
    border: none;
    color: white;
    cursor: pointer;
    transition: background 0.2s;
    border-radius: 2px;
  }

  .quantity-btn:hover {
    background: #3f3f46;
  }

  .quantity-display {
    min-width: 32px;
    text-align: center;
    font-weight: 600;
  }

  .remove-btn {
    background: transparent;
    border: none;
    color: #ef4444;
    cursor: pointer;
    padding: 0.25rem;
    transition: opacity 0.2s;
  }

  .remove-btn:hover {
    opacity: 0.7;
  }

  .empty-cart {
    text-align: center;
    padding: 3rem 1.5rem;
    color: #71717a;
  }

  .empty-cart svg {
    width: 64px;
    height: 64px;
    margin: 0 auto 1rem;
    opacity: 0.5;
  }
</style>

<script>
  import { getCart, removeFromCart, updateQuantity, clearCart, getCartSubtotal, getCartCount, formatPrice, onCartUpdate } from '../lib/cart';

  function renderCart() {
    const cart = getCart();
    const cartItemsContainer = document.getElementById('cart-items');
    const subtotalElement = document.getElementById('cart-subtotal');
    const checkoutBtn = document.getElementById('checkout-btn');
    const countBadge = document.getElementById('cart-count-badge');

    if (!cartItemsContainer || !subtotalElement || !checkoutBtn || !countBadge) return;

    // Update count badge
    const count = getCartCount();
    countBadge.textContent = count.toString();
    countBadge.style.display = count > 0 ? 'flex' : 'none';

    // Update subtotal
    subtotalElement.textContent = formatPrice(getCartSubtotal());

    // Enable/disable checkout button
    checkoutBtn.disabled = cart.length === 0;

    // Render cart items
    if (cart.length === 0) {
      cartItemsContainer.innerHTML = `
        <div class="empty-cart">
          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
          </svg>
          <p class="text-lg">Your cart is empty</p>
          <p class="text-sm mt-2">Add some items to get started</p>
        </div>
      `;
      return;
    }

    cartItemsContainer.innerHTML = cart.map((item, index) => `
      <div class="cart-item">
        <img src="${item.image}" alt="${item.name}" class="cart-item-image" />
        <div class="cart-item-info">
          <div class="cart-item-name">${item.name}</div>
          <div class="cart-item-details">
            ${item.size ? `Size: ${item.size}` : ''}
            ${item.size && item.color ? ' â€¢ ' : ''}
            ${item.color ? `Color: ${item.color}` : ''}
          </div>
          <div class="cart-item-price">${formatPrice(item.price * item.quantity)}</div>
        </div>
        <div class="cart-item-actions">
          <button class="remove-btn" data-index="${index}" aria-label="Remove item">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
          <div class="quantity-control">
            <button class="quantity-btn decrease-qty" data-index="${index}" aria-label="Decrease quantity">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
              </svg>
            </button>
            <span class="quantity-display">${item.quantity}</span>
            <button class="quantity-btn increase-qty" data-index="${index}" aria-label="Increase quantity">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
              </svg>
            </button>
          </div>
        </div>
      </div>
    `).join('');
  }

  // Open/close cart
  const cartSidebar = document.getElementById('cart-sidebar');
  const openCartBtn = document.getElementById('open-cart-btn');
  const closeCartBtn = document.getElementById('close-cart');
  const cartOverlay = document.getElementById('cart-overlay');

  function openCart() {
    cartSidebar?.classList.add('open');
    document.body.style.overflow = 'hidden';
  }

  function closeCart() {
    cartSidebar?.classList.remove('open');
    document.body.style.overflow = '';
  }

  openCartBtn?.addEventListener('click', openCart);
  closeCartBtn?.addEventListener('click', closeCart);
  cartOverlay?.addEventListener('click', closeCart);

  // Listen for cart-open events
  window.addEventListener('open-cart', openCart);

  // Handle cart actions
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;

    // Remove item
    if (target.closest('.remove-btn')) {
      const btn = target.closest('.remove-btn') as HTMLElement;
      const index = parseInt(btn.dataset.index || '0');
      removeFromCart(index);
    }

    // Decrease quantity
    if (target.closest('.decrease-qty')) {
      const btn = target.closest('.decrease-qty') as HTMLElement;
      const index = parseInt(btn.dataset.index || '0');
      const cart = getCart();
      updateQuantity(index, Math.max(0, cart[index].quantity - 1));
    }

    // Increase quantity
    if (target.closest('.increase-qty')) {
      const btn = target.closest('.increase-qty') as HTMLElement;
      const index = parseInt(btn.dataset.index || '0');
      const cart = getCart();
      updateQuantity(index, cart[index].quantity + 1);
    }
  });

  // Clear cart
  document.getElementById('clear-cart-btn')?.addEventListener('click', () => {
    if (confirm('Are you sure you want to clear your cart?')) {
      clearCart();
    }
  });

  // Checkout
  document.getElementById('checkout-btn')?.addEventListener('click', async () => {
    const cart = getCart();
    const btn = document.getElementById('checkout-btn') as HTMLButtonElement;

    if (cart.length === 0) return;

    try {
      btn.disabled = true;
      btn.textContent = 'Processing...';

      const response = await fetch('/api/gear/checkout', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ items: cart }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || 'Checkout failed');
      }

      // Redirect to Stripe Checkout
      if (data.url) {
        window.location.href = data.url;
      }
    } catch (error) {
      console.error('Checkout error:', error);
      alert('Failed to proceed to checkout. Please try again.');
      btn.disabled = false;
      btn.textContent = 'Proceed to Checkout';
    }
  });

  // Listen for cart updates
  onCartUpdate(() => {
    renderCart();
  });

  // Initial render
  renderCart();
</script>
