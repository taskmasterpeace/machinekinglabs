---
/**
 * ProductModal Component
 * Modal for viewing product details, selecting options, and adding to cart
 */
---

<!-- Product Modal (Hidden by default) -->
<div id="product-modal" class="product-modal">
  <!-- Overlay -->
  <div class="modal-overlay" id="modal-overlay"></div>

  <!-- Modal Content -->
  <div class="modal-content">
    <!-- Close Button -->
    <button id="close-modal" class="close-modal-btn" aria-label="Close modal">
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>

    <!-- Loading State -->
    <div id="modal-loading" class="modal-loading">
      <div class="loading-spinner"></div>
      <p>Loading product...</p>
    </div>

    <!-- Product Content -->
    <div id="modal-body" class="modal-body" style="display: none;">
      <div class="modal-grid">
        <!-- Product Image -->
        <div class="product-image-section">
          <div class="product-image-container">
            <img id="product-image" src="" alt="" class="product-image" />
          </div>
        </div>

        <!-- Product Details -->
        <div class="product-details-section">
          <h2 id="product-name" class="text-3xl font-bold mb-4"></h2>

          <div id="product-price" class="text-2xl font-bold text-white mb-6"></div>

          <!-- Variant Selection -->
          <div id="variant-section" class="mb-6">
            <label class="block text-sm font-semibold text-zinc-400 mb-2 uppercase tracking-wider">
              Select Option
            </label>
            <select id="variant-select" class="variant-select">
              <!-- Options will be populated by JavaScript -->
            </select>
          </div>

          <!-- Quantity Selection -->
          <div class="mb-6">
            <label class="block text-sm font-semibold text-zinc-400 mb-2 uppercase tracking-wider">
              Quantity
            </label>
            <div class="quantity-selector">
              <button id="qty-decrease" class="qty-btn" aria-label="Decrease quantity">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
                </svg>
              </button>
              <input id="qty-input" type="number" value="1" min="1" class="qty-input" />
              <button id="qty-increase" class="qty-btn" aria-label="Increase quantity">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                </svg>
              </button>
            </div>
          </div>

          <!-- Add to Cart Button -->
          <button id="add-to-cart-btn" class="add-to-cart-btn">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
            </svg>
            <span>Add to Cart</span>
          </button>

          <!-- Product Info -->
          <div class="product-info mt-8">
            <p class="text-sm text-zinc-400 mb-2">
              <strong class="text-white">Fulfillment:</strong> 2-7 business days
            </p>
            <p class="text-sm text-zinc-400 mb-2">
              <strong class="text-white">Shipping:</strong> Worldwide
            </p>
            <p class="text-sm text-zinc-400">
              <strong class="text-white">Print:</strong> High-quality print-on-demand
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  /* Modal Styles */
  .product-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 9998;
    display: none;
  }

  .product-modal.open {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(8px);
    animation: fadeIn 0.3s ease;
  }

  .modal-content {
    position: relative;
    background: #09090b;
    border: 1px solid #27272a;
    border-radius: 8px;
    max-width: 1000px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
    animation: slideUp 0.3s ease;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
  }

  .close-modal-btn {
    position: absolute;
    top: 1rem;
    right: 1rem;
    z-index: 10;
    width: 40px;
    height: 40px;
    background: #18181b;
    border: 1px solid #27272a;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #a1a1aa;
    cursor: pointer;
    transition: all 0.2s;
  }

  .close-modal-btn:hover {
    background: #27272a;
    color: white;
  }

  .modal-loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 4rem 2rem;
    color: #71717a;
  }

  .loading-spinner {
    width: 48px;
    height: 48px;
    border: 4px solid #27272a;
    border-top-color: white;
    border-radius: 50%;
    animation: spin 0.8s linear infinite;
    margin-bottom: 1rem;
  }

  .modal-body {
    padding: 2rem;
  }

  .modal-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 3rem;
  }

  @media (max-width: 768px) {
    .modal-grid {
      grid-template-columns: 1fr;
      gap: 2rem;
    }
  }

  .product-image-container {
    background: white;
    border-radius: 8px;
    padding: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .product-image {
    width: 100%;
    height: auto;
    max-height: 500px;
    object-fit: contain;
  }

  .variant-select {
    width: 100%;
    padding: 0.75rem 1rem;
    background: #18181b;
    border: 1px solid #27272a;
    border-radius: 4px;
    color: white;
    font-size: 1rem;
    cursor: pointer;
    transition: border-color 0.2s;
  }

  .variant-select:hover {
    border-color: #3f3f46;
  }

  .variant-select:focus {
    outline: none;
    border-color: white;
  }

  .quantity-selector {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: #18181b;
    border: 1px solid #27272a;
    border-radius: 4px;
    padding: 0.5rem;
    max-width: 150px;
  }

  .qty-btn {
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: transparent;
    border: none;
    color: white;
    cursor: pointer;
    border-radius: 4px;
    transition: background 0.2s;
  }

  .qty-btn:hover {
    background: #27272a;
  }

  .qty-input {
    flex: 1;
    text-align: center;
    background: transparent;
    border: none;
    color: white;
    font-size: 1.125rem;
    font-weight: 600;
    -moz-appearance: textfield;
  }

  .qty-input::-webkit-outer-spin-button,
  .qty-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  .qty-input:focus {
    outline: none;
  }

  .add-to-cart-btn {
    width: 100%;
    padding: 1rem 2rem;
    background: white;
    color: black;
    border: none;
    border-radius: 4px;
    font-size: 1.125rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    transition: all 0.2s;
  }

  .add-to-cart-btn:hover {
    background: #e5e5e5;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(255, 255, 255, 0.2);
  }

  .add-to-cart-btn:active {
    transform: translateY(0);
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
</style>

<script>
  import { addToCart, formatPrice } from '../lib/cart';

  let currentProduct: any = null;
  let allProducts: any[] = [];

  // Fetch products once
  async function fetchProducts() {
    if (allProducts.length > 0) return allProducts;

    try {
      const response = await fetch('/api/store/products');
      if (!response.ok) throw new Error('Failed to fetch products');
      allProducts = await response.json();
      return allProducts;
    } catch (error) {
      console.error('Error fetching products:', error);
      return [];
    }
  }

  // Open modal
  async function openProductModal(productId: string) {
    const modal = document.getElementById('product-modal');
    const modalBody = document.getElementById('modal-body');
    const modalLoading = document.getElementById('modal-loading');

    if (!modal || !modalBody || !modalLoading) return;

    // Show modal and loading state
    modal.classList.add('open');
    modalBody.style.display = 'none';
    modalLoading.style.display = 'flex';
    document.body.style.overflow = 'hidden';

    // Fetch and display product
    try {
      const products = await fetchProducts();
      const product = products.find((p: any) => p.id.toString() === productId);

      if (!product) {
        throw new Error('Product not found');
      }

      currentProduct = product;
      renderProduct(product);

      modalLoading.style.display = 'none';
      modalBody.style.display = 'block';
    } catch (error) {
      console.error('Error loading product:', error);
      alert('Failed to load product details');
      closeModal();
    }
  }

  // Render product details
  function renderProduct(product: any) {
    const nameEl = document.getElementById('product-name');
    const priceEl = document.getElementById('product-price');
    const imageEl = document.getElementById('product-image') as HTMLImageElement;
    const variantSelect = document.getElementById('variant-select') as HTMLSelectElement;

    if (!nameEl || !priceEl || !imageEl || !variantSelect) return;

    nameEl.textContent = product.name;
    imageEl.src = product.thumbnail;
    imageEl.alt = product.name;

    // Populate variant options
    variantSelect.innerHTML = product.variants.map((variant: any) => `
      <option value="${variant.id}" data-price="${variant.price}" data-image="${variant.image}">
        ${variant.name} - ${formatPrice(variant.price)}
      </option>
    `).join('');

    // Update price and image when variant changes
    updateVariantDisplay();
  }

  // Update display based on selected variant
  function updateVariantDisplay() {
    const variantSelect = document.getElementById('variant-select') as HTMLSelectElement;
    const priceEl = document.getElementById('product-price');
    const imageEl = document.getElementById('product-image') as HTMLImageElement;

    if (!variantSelect || !priceEl || !imageEl) return;

    const selectedOption = variantSelect.options[variantSelect.selectedIndex];
    const price = parseFloat(selectedOption.dataset.price || '0');
    const image = selectedOption.dataset.image;

    priceEl.textContent = formatPrice(price);
    if (image) imageEl.src = image;
  }

  // Close modal
  function closeModal() {
    const modal = document.getElementById('product-modal');
    modal?.classList.remove('open');
    document.body.style.overflow = '';
    currentProduct = null;
  }

  // Event listeners
  document.getElementById('close-modal')?.addEventListener('click', closeModal);
  document.getElementById('modal-overlay')?.addEventListener('click', closeModal);

  // Variant selection
  document.getElementById('variant-select')?.addEventListener('change', updateVariantDisplay);

  // Quantity controls
  const qtyInput = document.getElementById('qty-input') as HTMLInputElement;
  document.getElementById('qty-decrease')?.addEventListener('click', () => {
    if (qtyInput) {
      const val = parseInt(qtyInput.value) || 1;
      qtyInput.value = Math.max(1, val - 1).toString();
    }
  });

  document.getElementById('qty-increase')?.addEventListener('click', () => {
    if (qtyInput) {
      const val = parseInt(qtyInput.value) || 1;
      qtyInput.value = (val + 1).toString();
    }
  });

  // Add to cart
  document.getElementById('add-to-cart-btn')?.addEventListener('click', () => {
    if (!currentProduct) return;

    const variantSelect = document.getElementById('variant-select') as HTMLSelectElement;
    const qtyInput = document.getElementById('qty-input') as HTMLInputElement;

    const selectedOption = variantSelect.options[variantSelect.selectedIndex];
    const variantId = parseInt(selectedOption.value);
    const variant = currentProduct.variants.find((v: any) => v.id === variantId);

    if (!variant) return;

    const cartItem = {
      variantId: variant.id,
      productId: currentProduct.id,
      name: `${currentProduct.name} - ${variant.name}`,
      price: variant.price,
      quantity: parseInt(qtyInput.value) || 1,
      image: variant.image,
      sku: variant.sku,
    };

    addToCart(cartItem);

    // Show success feedback
    const btn = document.getElementById('add-to-cart-btn');
    if (btn) {
      const originalText = btn.innerHTML;
      btn.innerHTML = '<span>✓ Added to Cart!</span>';
      btn.style.background = '#10b981';
      btn.style.color = 'white';

      setTimeout(() => {
        btn.innerHTML = originalText;
        btn.style.background = '';
        btn.style.color = '';
        closeModal();
        // Open cart
        window.dispatchEvent(new Event('open-cart'));
      }, 1000);
    }
  });

  // Listen for open-product-modal events
  window.addEventListener('open-product-modal', ((e: CustomEvent) => {
    const { productId } = e.detail;
    openProductModal(productId);
  }) as EventListener);
</script>
